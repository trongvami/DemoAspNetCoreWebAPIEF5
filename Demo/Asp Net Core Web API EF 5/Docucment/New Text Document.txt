Fluent API

link document tham khao: https://www.entityframeworktutorial.net/EntityFramework6/introduction.aspx

entity.ToTable("Product") : Table name
entity.HasKey(e=>e.MaHH) : Primary key
entity.HasIndex(p=>p.TenLoai) : index
.IsUnique(true); : establish Unique
entity.HasOne(e=>e.Category) : chi ra entity ben mot
.WithMany(lo=>lo.Products) : chi ra Coolection phia mot
.hasForeignKey(e=>MaLoai) : khoa ngoai
.OnDelete(DeleteBehavior.SetNull) : ung xu loai khi xoa
.HasConstraintName("FK_HangHoa_Loai") : dat ten FK

------------

IActionResult

Specific Type
+ object/null
+ List of object
IActionResult with HttpStatus Code
+ 200 Ok - Request has successded
+ 201 Created - A new resource has been created as a result
+ 204 No Content - No need to return a response result
+ 400 bad request - the request could not be understood by the server due to incorrect syntax
+ 401 Unauthorized - Request requires user authentication
+ 403 Forbidden - Unauthorized request
+ 404 Not Found
+ 405 Method Not Allowed
+ 422 Unprocessable Entity
+ 500 Internal Server Error - Unexpected condition
+ 503 Service Unavailable
+ 504 Gateway Timeout

+2xx Success
+3xx - redirection
+5xx - Server Error

------------

DI is a design pattern

Repository parttern
+ is an abstraction of data access layer. it hides the details of how exactly the data is saved or retrieved from the underlying data source.
+ the details of how the data is stored and retrieved is in the respective repository

benefits of repository pattern
+ the code is cleaner, and easier to reuse and maintain
+ enables us to create loosely coupled systems
+ in an unit testing project, it is easy to replace a real repository with a fake implementation for testing.

repository pattern interface
+ what operations are supported by the repository
+ the data required for each of the operations i.e the parameters that need to be passed to the method and the data the method returns
+ the implementation details are in the respective repository class that implements the repository interface.

-------------

Lambda syntax
var dsHH = ctx.HangHoas.where(hh=>hh.DonGia > 10)
var dsHH = ctx.HangHoas.Select(hh=>hh.TenHH)
var dsHH = ctx.HangHoas.Select(hh=>new {hh.TenHH,HH.DonGia})
var dsHH = ctx.hanghoas.where(hh>hh.DonGia > 10 && || hh.DonGia = 100)
var hh = ctx.HangHoas.where(hh=>hh.TenHH.Contains(search));

only read
+ asnotracking()

Query Syntax
var dsHH = from hh in ctx.HangHoas where hhDonGia > 10 select hh;
var dsHH = from hh in ctx.HangHoas select hhTenHH
var dsHH = from hh in ctx Hanghoas select new {hh.TenHH, hh.DonGia}
var dsHH = from hh in ctx.HangHoas where hh.DonGia > 10 and hh.DonGia < 1000 select hh;

lay phan tu dau tien
+ First(), FirstOrDefault()
lay phan tu cuoi cung
+ Last(), LastOrDefault()
lay phan tu duy nhat
+ single(), singleordefault()

sorting
+ query.OrderVt()
+ query.OrderByDescending()
+ query.ThenBy()

phan trang: skip(), take()
+ query.Skip(skipN).take(pageSize)


Authentication: who are you? dung de xac thuc ban la ai, xac thuc ng dung, validate a system is accessing by the right person
+ dung jwt
+ call api http post for login with username, password
+ create jwt by secret key and return to client
+ call api get/update with jwt in authorization header
+ validates token and return the reponse
Authorization: are u allowed to do that? check user's permissions to access data
 
















































